// Generated by CoffeeScript 2.5.1
(function() {
  var app, client, cookieParser, etsyjs, express, fs, nconf, server, session, url;

  express = require('express');

  session = require('express-session');

  cookieParser = require('cookie-parser');

  url = require('url');

  fs = require('fs');

  nconf = require('nconf');

  etsyjs = require('../lib/etsyjs');

  // nconf reads in config values from json file
  nconf.argv().env();

  nconf.file({
    file: './config.json'
  });

  // instantiate client with key and secret and set callback url
  client = etsyjs.client({
    key: nconf.get('key'),
    secret: nconf.get('secret'),
    callbackURL: 'http://localhost:3000/authorise'
  });

  app = express();

  app.use(cookieParser('secEtsy'));

  app.use(session());

  app.get('/', function(req, res) {
    var oauthSession;
    oauthSession = {
      token: req.session.token,
      secret: req.session.sec
    };
    // if we are accessing the API for the first time, then kick off OAuth dance
    if ((oauthSession.token == null) && (oauthSession.secret == null)) {
      return client.requestToken(function(err, response) {
        if (err) {
          return console.log(err);
        }
        req.session.token = response.token;
        req.session.sec = response.tokenSecret;
        return res.redirect(response.loginUrl);
      });
    } else {
      // else if we have OAuth credentials for this session then use them
      return client.auth(oauthSession.token, oauthSession.secret).get('/users/hnbulz1l', {}, function(err, status, body, headers) {
        if (err) {
          console.log(err);
        }
        if (body) {
          console.dir(body);
        }
        if (body) {
          return res.send(body.results[0]);
        }
      });
    }
  });

  app.get('/shop', function(req, res) {
    var oauthSession;
    oauthSession = {
      token: req.session.token,
      secret: req.session.sec
    };
    console.log("fetching a shop...");
    return client.auth(oauthSession.token, oauthSession.secret).get('/shops/CustomGiftWear', {}, function(err, status, body, headers) {
      if (err) {
        console.log(err);
      }
      if (body) {
        console.dir(body);
      }
      if (body) {
        return res.send(body.results[0]);
      }
    });
  });

  app.get('/shop/transactions', function(req, res) {
    var oauthSession;
    oauthSession = {
      token: req.session.token,
      secret: req.session.sec
    };
    console.log("fetching a shop...");
    return client.auth(oauthSession.token, oauthSession.secret).get('/shops/CustomGiftWear/transactions', {}, function(err, status, body, headers) {
      if (err) {
        console.log(err);
      }
      if (body) {
        console.dir(body);
      }
      if (body) {
        return res.send(body.results);
      }
    });
  });

  app.get('/shop/receipts', function(req, res) {
    var oauthSession;
    oauthSession = {
      token: req.session.token,
      secret: req.session.sec
    };
    console.log("fetching a shop...");
    return client.auth(oauthSession.token, oauthSession.secret).get('/shops/CustomGiftWear/receipts', {}, function(err, status, body, headers) {
      if (err) {
        console.log(err);
      }
      if (body) {
        console.dir(body);
      }
      if (body) {
        return res.send(body.results);
      }
    });
  });

  // app.get '/update', (req, res) ->
  //   oauthSession = {token: req.session.token, secret: req.session.sec}
  //   console.log("updating profile...")
  //   updatedProfile = {user_id: "etsyjs", city: "New York City"}
  //   client.auth(oauthSession.token, oauthSession.secret).put "/users/etsyjs/profile", updatedProfile, (err, status, body, headers) ->
  //     console.log err if err
  //     console.dir(body) if body
  //     res.send body.results[0] if body
  app.get('/authorise', function(req, res) {
    var query, verifier;
    // parse the query string for OAuth verifier
    query = url.parse(req.url, true).query;
    verifier = query.oauth_verifier;
    console.log(`==> with OAuth verifier ${verifier} and token ${req.session.token} and secret ${req.session.sec}`);
    // final part of OAuth dance, request access token and secret with given verifier
    return client.accessToken(req.session.token, req.session.sec, verifier, function(err, response) {
      // update our session with OAuth token and secret
      req.session.token = response.token;
      req.session.sec = response.tokenSecret;
      return res.redirect('/');
    });
  });

  server = app.listen(3000, function() {
    return console.log('Listening on port %d', server.address().port);
  });

}).call(this);
